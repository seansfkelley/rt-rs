use std::str::FromStr;
use std::boxed::Box;
use std::sync::Arc;
use std::path::{ Path, PathBuf };
use math::*;
use core::*;
use material::*;
use geometry::*;
use tessellation::*;
use texture::*;
use light::*;
use image_utils::*;
use importer::scene_builder::*;
use importer::parse_into_builder;

grammar(builder: &mut SceneBuilder, scene_file_path: &Path);

pub SceneFile: () = {
    Statement* => {},
};

Statement: () = {
    "camera" <CameraBuilder> => builder.camera(<>),
    "animation" <Animation> => builder.animation(<>),
    "image_dimensions" <Tuple2<U32>> => builder.image_dimensions(<>),
    "antialias" <U32> => builder.antialias(<>),
    "antialias_tolerance" <F64> => builder.antialias_tolerance(<>),
    "depth_limit" <U32> => builder.depth_limit(<>),
    "background_color" <Color> => builder.background_color(<>),
    "material" <Identifier> <Material> => builder.register_material(<>),
    "transform" "pop" "all" => builder.pop_all_transforms(),
    "transform" "pop" <U32?> => builder.pop_n_transforms(<>.unwrap_or(1u32)),
    "transform" <Transform> => builder.push_transform(<>),
    "object" <Object> => builder.add_object(<>),
    "light" <Light> => builder.add_light(<>),
    "inline" <Path> => parse_into_builder(<>.as_ref(), builder, self::parse_SceneFile),
};

CameraBuilder: CameraBuilder = {
    "orthographic" "{"
        <common:CameraCommon>
    "}" => CameraBuilder::Orthographic(common),
    "perspective" "{"
        <common:CameraCommon>
        <fov:("field_of_view" <F64>)?>
    "}" => CameraBuilder::Perspective(common, fov.unwrap_or(90f64)),
};

CameraCommon: CameraCommon = {
    "position" <Point>
    "look_at" <Point>
    "up" <Vec3>
    <("screen_size" <Tuple2<F64>>)?>
};

Animation: (u32, Vec<Mat4>) = "{"
    "frames" <U32>
    "camera_transforms" <List<Transform>>
"}";

Material: Box<Material> = {
    "flat" "{"
        "texture" <texture:Texture>
    "}" => Box::new(FlatMaterial { texture }),
    "phong" "{"
        <diffuse:("diffuse" <Texture>)?>
        <specular:("specular" <Texture>)?>
        <reflection:("reflection" <Texture>)?>
        <transmission:("transmission" <Texture>)?>
        <index_of_refraction:("index_of_refraction" <F64>)?>
    "}" => Box::new(PhongMaterial {
        diffuse: diffuse.unwrap_or(Box::new(Color::BLACK)),
        specular: specular.unwrap_or(Box::new(Color::BLACK)),
        reflection: reflection.unwrap_or(Box::new(Color::BLACK)),
        transmission: transmission.unwrap_or(Box::new(Color::BLACK)),
        index_of_refraction: index_of_refraction.unwrap_or(1f64),
    })
};

// LightingFacet: LightingFacet = {
//     "ambient" => LightingFacet::Ambient,
//     "diffuse" => LightingFacet::Diffuse,
//     "specular" => LightingFacet::Specular,
//     "reflectivity" => LightingFacet::Reflectivity,
// };

// ImageTextureFacet: ImageTextureFacet = {
//     <fraction:F64> "*" <facet:LightingFacet> => ImageTextureFacet::Reference(facet, fraction),
//     "constant" <color:Color> => ImageTextureFacet::Constant(color),
//     <path:Path> => ImageTextureFacet::from_path(path.as_ref()),
// };

Texture: Box<Texture> = {
    <Color> => Box::new(<>),
    "image" <Path> => Box::new(load_image(<>.as_ref())),
    "checkerboard" "{"
        <checks_u:("checks_u" <U32>)?>
        <checks_v:("checks_v" <U32>)?>
        <color_one:("color_one" <Color>)?>
        <color_two:("color_two" <Color>)?>
    "}" => Box::new(CheckerboardTexture {
        checks_u: checks_u.unwrap_or(2u32),
        checks_v: checks_v.unwrap_or(2u32),
        color_one: color_one.unwrap_or(Color::WHITE),
        color_two: color_two.unwrap_or(Color::BLACK),
    }),
    "debug" => Box::new(DebugTexture {}),
    // "wood" "{"
    //     "color_one" <color_one:Color>
    //     "color_two" <color_two:Color>
    //     <scale:("scale" <F64>)?>
    //     <reflectivity:("reflectivity" <F64>)?>
    //     <specular_exponent:("specular_exponent" <F64>)?>
    //     <seed:("seed" <Usize>)?>
    // "}" => Box::new(Wood::new(
    //     seed.unwrap_or(0usize),
    //     color_one,
    //     color_two,
    //     scale.unwrap_or(0.2f64),
    //     reflectivity.unwrap_or(0.1f64),
    //     specular_exponent.unwrap_or(20f64),
    // )),
};

Transform: Mat4 = {
    "scale" <Vec3> => Mat4::create_scale(<>),
    "translate" <Vec3> => Mat4::create_translation(<>),
    "rotate" <theta_degrees:F64> "deg" <axis:Vec3> => Mat4::create_rotation(theta_degrees.to_radians(), axis.as_normalized()),
};

Object = "{"
    "geometry" <Geometry>
    "material" <Identifier>
"}";

pub Geometry: Box<Geometry> = {
    "sphere" "{"
        "radius" <F64>
    "}" => Box::new(Sphere::new(<>)),
    "rect_prism" "{"
        "min" <min:Point>
        "max" <max:Point>
    "}" => Box::new(RectPrism::new(min, max)),
    "difference" "{"
        "positive" "{"
            "geometry" <positive_geometry:Geometry>
            <positive_transform:("transform" <Transform>)?>
        "}"
        "negative" "{"
            "geometry" <negative_geometry:Geometry>
            <negative_transform:("transform" <Transform>)?>
        "}"
    "}" => Box::new(Difference::new(
        Arc::new(Shape::new(Arc::from(positive_geometry), positive_transform.map(Transform::new).unwrap_or(IDENTITY_TRANSFORM.clone()))),
        Arc::new(Shape::new(Arc::from(negative_geometry), negative_transform.map(Transform::new).unwrap_or(IDENTITY_TRANSFORM.clone()))),
    )),
    <TriangleMeshData> => Box::new(<>.into_triangle_mesh()),
    <Path> => parse_into_builder(<>.as_ref(), builder, self::parse_Geometry),
};

ClothClosure: ClothClosure = {
    "none" => ClothClosure::None,
    "cap" => ClothClosure::Cap,
    "join" => ClothClosure::Join,
    "closed" => ClothClosure::Closed,
};

TriangleMeshData: TriangleMeshData = {
    "triangle_mesh" "{"
        "positions" <positions:List<Point>>
        <uvs:("uvs" <List<Uv>>)?>
        "indices" <indices:List<Tuple3<Usize>>>
        <smoothing:("smoothing" <Smoothing>)?>
        <is_closed:("is_closed" <Bool>)?>
    "}" => TriangleMeshData::new(
        positions,
        smoothing.unwrap_or(Smoothing::Implicit),
        uvs,
        indices,
        is_closed.unwrap_or(true),
    ),
    "cloth" "{"
        "curves" <curves:List<Curve>>
        <tessellation_factor:("tessellation_factor" <Usize>)?>
        <closure:("closure" <ClothClosure>)?>
    "}" => create_cloth(
        curves,
        tessellation_factor.unwrap_or(100usize),
        closure.unwrap_or(ClothClosure::None),
    ),
    "tessellated_sphere" "{"
        "depth" <depth:U32>
        <smoothing:("smoothing" <Smoothing>)?>
    "}" => tessellate_sphere(
        depth,
        smoothing.unwrap_or(Smoothing::Implicit),
    ),
    "displace" "{"
        "texture" <path:Path>
        "min" <min:F64>
        "max" <max:F64>
        "mesh" <mesh:TriangleMeshData>
        <smoothing:("smoothing" <Smoothing>)?>
    "}" => displace_triangle_mesh(
        DisplacementMap::new(Box::new(load_image(path.as_ref())), min, max),
        mesh,
        smoothing.unwrap_or(Smoothing::Implicit),
    ),
};

Light: LightType = {
    "point" "{"
        "position" <position:Point>
        "intensity" <intensity:Color>
    "}" => LightType::Delta(Box::new(PointLight::new(position, intensity))),
    "directional" "{"
        "direction" <direction:Vec3>
        "radiance" <radiance:Color>
    "}" => LightType::Delta(Box::new(DirectionalLight::new(direction, radiance))),
};

Curve: Box<Curve> = {
    "cubic_bezier" "("
        <p0:Point> ","
        <p1:Point> ","
        <p2:Point> ","
        <p3:Point> ","?
    ")" => Box::new(CubicBezier { p0, p1, p2, p3 }),
    "cubic_bezier_path" <CubicBezierPath> => Box::new(<>),
};

CubicBezierPath: CurvePath = <points:List<Point>> => {
    if (points.len() - 1) % 3 == 0 {
        let end_point = points[points.len() - 1];
        let mut fragments: Vec<(Point, Point, Point)> = vec![];
        for i in 0..((points.len() - 1) / 3) {
            fragments.push((points[i * 3], points[i * 3 + 1], points[i * 3 + 2]));
        }
        CurvePath::from_cubic_bezier_fragments(fragments, end_point)
    } else {
        panic!("cubic bezier paths must have exactly 3n + 1 points");
    }
};

Smoothing: Smoothing = {
    "none" => Smoothing::None,
    "implicit" => Smoothing::Implicit,
    "explicit" <List<Normal>> => Smoothing::Explicit(<>),
};

Uv: Uv = {
    <F64> <F64> => Uv(<>),
};

// Handily adapted from the tutorial!
// https://github.com/nikomatsakis/lalrpop/blob/master/doc/tutorial.md
List<T>: Vec<T> = {
    "[" <v:(<T> ",")*> <e:T?> "]" => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tuple2<T>: (T, T) = <T> <T>;
Tuple3<T>: (T, T, T) = <T> <T> <T>;

Point: Point = <f1:F64> <f2:F64> <f3:F64> => Point { x: f1, y: f2, z: f3 };
Vec3: Vec3 = <f1:F64> <f2:F64> <f3:F64> => Vec3 { x: f1, y: f2, z: f3 };
Normal: Normal = <f1:F64> <f2:F64> <f3:F64> => Normal { x: f1, y: f2, z: f3 };
Color: Color = {
    <f1:F64> <f2:F64> <f3:F64> => Color { r: f1, g: f2, b: f3 },
    r##"#[0-9a-fA-F]{3}"## => Color {
        r: u32::from_str_radix(&<>[1..2], 16).unwrap() as f64 / 15f64,
        g: u32::from_str_radix(&<>[2..3], 16).unwrap() as f64 / 15f64,
        b: u32::from_str_radix(&<>[3..4], 16).unwrap() as f64 / 15f64,
    },
    r##"#[0-9a-fA-F]{6}"## => Color {
        r: u32::from_str_radix(&<>[1..3], 16).unwrap() as f64 / 255f64,
        g: u32::from_str_radix(&<>[3..5], 16).unwrap() as f64 / 255f64,
        b: u32::from_str_radix(&<>[5..7], 16).unwrap() as f64 / 255f64,
    },
    <scale:F64> "*" <color:Color> => scale * color,
};
Bool: bool = {
    "true" => true,
    "false" => false,
};
Identifier = r"[a-zA-Z_][a-zA-Z0-9_]*";
Path: Box<Path> = r#""[-a-zA-Z0-9./_]+""# => scene_file_path.parent().unwrap().join(PathBuf::from(<>[1..<>.len() - 1].to_owned())).into_boxed_path();
RawNumber = r"[-+]?[0-9]*\.?[0-9]+"; // Ripped from https://www.regular-expressions.info/floatingpoint.html
F64: f64 = RawNumber => f64::from_str(<>).unwrap();
U32: u32 = RawNumber => u32::from_str(<>).unwrap();
Usize: usize = RawNumber => usize::from_str(<>).unwrap();
